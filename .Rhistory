cormat_plot = corrplot.mixed(cormat, order = "hclust",tl.cex = 0.6, number.cex = .6)
library(reshape)
library(corrplot)
# pivot the table to have ticker as column, price as value, date as row
br = cast(l.out$df.tickers[,c("ticker","ref.date","price.adjusted")], ref.date ~ ticker)
cormat = round(cor(br, use="pairwise.complete.obs"),2)
cormat_plot = corrplot.mixed(cormat, order = "hclust",tl.cex = 0.6, number.cex = .6)
print(cormat)
kable(cormat,format = "latex", booktabs = T) %>%
kable_styling(latex_options = "striped")
summary(Smarket)
library(ISLR)
names(Smarket)
dim(Smarket)
summary(Smarket)
pairs(Smarket)
glm.fits=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial) ## generalized linear model, family = binomial to be logistic regression
summary(glm.fits)
fid = read.table("D:/RWD/FI_AB_18FY.txt", header = TRUE, sep = '\t',quote = "", comment.char = "")
fid = fid[which(fid$TotalTradesMeasured == 1),]
a = fid[1:10,]
View(a)
View(a)
View(a)
fid1 = c(fid$Sector,fid$Bond.Rating)
fid1 = cbind(fid$Sector,fid$Bond.Rating)
View(fid1)
vars1 = c("Sector","Bond.Rating")
fid1 = fid[vars1]
View(fid1)
vars1 = c("Sector","Bond.Rating","Liquidity.Score","Convertible","Currency",
"Days.Since.Issue","Issue.Name","ISIN","TRG_Date","EVB.Feed.Type")
fid1 = fid[vars1]
View(a)
b = names(a)
b
a[,111:131]
a[,132:150]
names(a)
vars1 = c("Sector","Bond.Rating","LiquidityScore","Convertible","Currency",
"Days.Since.Issue","Issue.Name","ISIN","TRG_Date","EVB.Feed.Type",
"SubtType.","Order.Placement","AvgPrice","NotionalValueUSD",
"MktValueUSD","PriceBid","PriceAsk","LastFarTouchPrice",
"PriceTimestamp","CloseTMinus1","Convexity","MaturityMonths",
"MidConvexity","MidMacaulayDuration","Quotes","QuotesDepth",
"QuotesDealerCount","TRACELastTradedDate","TRACETradeCount1Day",
"TRACETradeCount10Day","TRACETradeCount60Day","LastPriceSlippage",
"LastFarTouchSlippage","SpreadSize")
fid1 = fid[vars1]
pairs(fid1,)
pairs(fid1)
pairs(fid1, subset = c("LastFarTouchSlippage","MktValueUSD"))
pairs(fid1[LastFarTouchSlippage,MktValueUSD])
pairs(fid1[32:34])
summary(fid1$LastFarTouchSlippage)
summary(fid1$SpreadSize)
summary(fid1$NotionalValueUSD)
summary(fid1$MktValueUSD)
summary(fid1$LastPriceSlippage)
fid1[which(abs(fid1$LastFarTouchSlippage) >= 3000),]
outliers = fid1[which(abs(fid1$LastFarTouchSlippage) >= 3000),]
View(outliers)
fid1 = fid1[!outliers]
fid1 = fid1[which(abs(fid1$LastFarTouchSlippage) < 3000),]
fid1 = fid1[which(abs(fid1$LastFarTouchSlippage) < 3000),]
outliers = fid1[which(abs(fid1$LastFarTouchSlippage) >= 3000),]
fid1 = fid[vars1]
outliers = fid1[which(abs(fid1$LastFarTouchSlippage) >= 3000),]
fid1 = fid1[which(abs(fid1$LastFarTouchSlippage) < 3000),]
summary(fid1$LastPriceSlippage)
summary(fid1$LastFarTouchSlippage)
fid1 = fid1[which(abs(fid1$LastPriceSlippage) < 3000),]
summary(fid1$LastPriceSlippage)
fid1 = fid1[which(abs(fid1$LastPriceSlippage) < 3000),]
summary(fid1$LastFarTouchSlippage)
summary(fid1$SpreadSize)
summary(fid1$MaturityMonths)
summary(exp(fid1$LastPriceSlippage))
summary(log(fid1$LastPriceSlippage))
summary(fid1$Convexity)
summary(fid1$MidMacaulayDuration)
test = fid1["LastPriceSlippage"]
test = fid1["LastPriceSlippage","SpreadSize"]
test = fid1[c("LastPriceSlippage","SpreadSize")]
View(test)
test = fid1[c("LastPriceSlippage","SpreadSize","NotionalValueUSD",
"MktValueUSD","MaturityMonths","Convexity",
"MidMacaulayDuration")]
pairs(test)
library(corrplot)
cormat = round(cor(test, use="pairwise.complete.obs"),2)
cormat_plot = corrplot.mixed(cormat, order = "hclust",tl.cex = 0.6, number.cex = .6)
cormat = round(cor(test, use="everything"),2)
cormat_plot = corrplot.mixed(cormat, order = "hclust",tl.cex = 0.6, number.cex = .6)
cormat = round(cor(test, use="all.obs"),2)
cormat = round(cor(test, use="complete.obs"),2)
cormat_plot = corrplot.mixed(cormat, order = "hclust",tl.cex = 0.6, number.cex = .6)
cormat
View(cormat)
cormat = round(cor(test, use="pairwise.complete.obs"),2)
cormat
View(cormat)
cormat_pearson = round(cor(test, use="pairwise.complete.obs"),2)
cormat_spearman = round(cor(test, use="pairwise.complete.obs"),2)
rm(cormat)
View(cormat_pearson)
View(cormat_spearman)
cormat_pearson = round(cor(test, use="pairwise.complete.obs",method =
"pearson"),2)
cormat_spearman = round(cor(test, use="pairwise.complete.obs",method =
"spearman"),2)
cormat_pearson
cormat_spearman
cormat_plot = corrplot.mixed(cormat, order = "hclust",tl.cex = 0.6, number.cex = .6)
View(cormat_pearson)
View(cormat_spearman)
cormat_plot = corrplot.mixed(cormat_pearson, lower.col = "black",order = "hclust",tl.cex = 0.6, number.cex = .6)
cormat_plot = corrplot.mixed(cormat_pearson, lower.col = "black",tl.cex = 0.6, number.cex = .6)
rm(cormat_plot)
cormat_plot_p = corrplot.mixed(cormat_pearson, lower.col = "black",tl.cex = 0.6, number.cex = .6)
cormat_plot_s = corrplot.mixed(cormat_spearman, lower.col = "black",tl.cex = 0.6, number.cex = .6)
test$LogSpreadSize = log(test$SpreadSize)
test$LogMktValueUSD = log(test$MktValueUSD)
cormat_pearson = round(cor(test, use="pairwise.complete.obs",method =
"pearson"),2)
cormat_spearman = round(cor(test, use="pairwise.complete.obs",method =
"spearman"),2)
cormat_pearson
cormat_spearman
cormat_plot_p = corrplot.mixed(cormat_pearson, lower.col = "black",tl.cex = 0.6, number.cex = .6)
cormat_plot_s = corrplot.mixed(cormat_spearman, lower.col = "black",tl.cex = 0.6, number.cex = .6)
test[1:10,]
fid = fid[which(fid$MktValueUSD != 0),]
fid1 = fid[vars1]
test = fid1[c("LastPriceSlippage","SpreadSize","NotionalValueUSD",
"MktValueUSD","MaturityMonths","Convexity",
"MidMacaulayDuration")]
## takes long to run, be cautious for adding more vairables
pairs(test)
test = fid1[c("LastPriceSlippage","SpreadSize","NotionalValueUSD",
"MktValueUSD","MaturityMonths","Convexity",
"MidMacaulayDuration")]
test$LogSpreadSize = log(test$SpreadSize)
test$LogMktValueUSD = log(test$MktValueUSD)
test[1:10,]
cormat_pearson = round(cor(test, use="pairwise.complete.obs",method =
"pearson"),2)
cormat_spearman = round(cor(test, use="pairwise.complete.obs",method =
"spearman"),2)
cormat_pearson
cormat_spearman
cormat_plot_p = corrplot.mixed(cormat_pearson, lower.col = "black",tl.cex = 0.6, number.cex = .6)
cormat_plot_s = corrplot.mixed(cormat_spearman, lower.col = "black",tl.cex = 0.6, number.cex = .6)
unique(fid$SubtType.)
fid = fid[which(fid$SubtType. in c("IG","HY")),]
fid = fid[which(fid$SubtType. %in% c("IG","HY")),]
unique(fid$SubtType.)
fid1 = fid[vars1]
summary(fid1$LastFarTouchSlippage)
outliers = fid1[which(abs(fid1$LastFarTouchSlippage) >= 3000),]
summary(fid1$LastPriceSlippage)
fid1 = fid1[which(abs(fid1$LastPriceSlippage) < 3000),]
summary(fid1$SpreadSize)
summary(fid1$NotionalValueUSD)
summary(fid1$MktValueUSD)
summary(fid1$MaturityMonths)
summary(fid1$Convexity)
summary(fid1$MidMacaulayDuration)
test = fid1[c("LastPriceSlippage","SpreadSize","NotionalValueUSD",
"MktValueUSD","MaturityMonths","Convexity",
"MidMacaulayDuration")]
pairs(test)
test$LogSpreadSize = log(test$SpreadSize)
test$LogMktValueUSD = log(test$MktValueUSD)
test[1:10,]
cormat_pearson = round(cor(test, use="pairwise.complete.obs",method =
"pearson"),2)
cormat_spearman = round(cor(test, use="pairwise.complete.obs",method =
"spearman"),2)
cormat_pearson
cormat_spearman
cormat_plot_p = corrplot.mixed(cormat_pearson, lower.col = "black",tl.cex = 0.6, number.cex = .6)
cormat_plot_s = corrplot.mixed(cormat_spearman, lower.col = "black",tl.cex = 0.6, number.cex = .6)
lm.fit = lm(LastPriceSlippage ~ SpreadSize + MktValueUSD + MaturityMonths,
data = test)
summary(lm.fit)
names(a)
b
test = fid1[c("LastPriceSlippage","SpreadSize","MktValueUSD",
"MaturityMonths","Convexity","MidMacaulayDuration",
"LiquidityScore","Quotes","QuotesDepth","QuotesDealerCount",
"TRACETradeCount60Day")]
## takes long to run, be cautious for adding more vairables
pairs(test)
test = fid1[c("LastPriceSlippage","SpreadSize","MktValueUSD",
"MaturityMonths","Convexity","MidMacaulayDuration",
"LiquidityScore","Quotes","QuotesDepth","QuotesDealerCount",
"TRACETradeCount60Day")]
## takes long to run, be cautious for adding more vairables
## pairs(test)
cormat_pearson = round(cor(test, use="pairwise.complete.obs",method =
"pearson"),2)
cormat_spearman = round(cor(test, use="pairwise.complete.obs",method =
"spearman"),2)
cormat_plot_p = corrplot.mixed(cormat_pearson, lower.col = "black",tl.cex = 0.6, number.cex = .6)
library(data.table)
library(corrplot)
fid = read.table("D:/RWD/FI_AB_18FY.txt", header = TRUE, sep = '\t',quote = "", comment.char = "")
fid = fid[which(fid$TotalTradesMeasured == 1),]
fid = fid[which(fid$MktValueUSD != 0),]
# Focus on corporate only
unique(fid$SubtType.)
fid = fid[which(fid$SubtType. %in% c("IG","HY")),]
a = fid[1:10,]
b = names(a)
vars1 = c("Sector","Bond.Rating","LiquidityScore","Convertible","Currency",
"Days.Since.Issue","Issue.Name","ISIN","TRG_Date","EVB.Feed.Type",
"SubtType.","Order.Placement","AvgPrice","NotionalValueUSD",
"MktValueUSD","PriceBid","PriceAsk","LastFarTouchPrice",
"PriceTimestamp","CloseTMinus1","Convexity","MaturityMonths",
"MidConvexity","MidMacaulayDuration","Quotes","QuotesDepth",
"QuotesDealerCount","TRACELastTradedDate","TRACETradeCount1Day",
"TRACETradeCount10Day","TRACETradeCount60Day","LastPriceSlippage",
"LastFarTouchSlippage","SpreadSize")
fid1 = fid[vars1]
summary(fid1$LastFarTouchSlippage)
outliers = fid1[which(abs(fid1$LastFarTouchSlippage) >= 3000),]
summary(fid1$LastPriceSlippage)
fid1 = fid1[which(abs(fid1$LastPriceSlippage) < 3000),]
summary(fid1$SpreadSize)
summary(fid1$NotionalValueUSD)
summary(fid1$MktValueUSD)
summary(fid1$MaturityMonths)
summary(fid1$Convexity)
summary(fid1$MidMacaulayDuration)
test = fid1[c("LastPriceSlippage","SpreadSize","MktValueUSD",
"MaturityMonths","Convexity","MidMacaulayDuration",
"LiquidityScore","Quotes","QuotesDepth","QuotesDealerCount",
"TRACETradeCount60Day")]
## takes long to run, be cautious for adding more vairables
## pairs(test)
cormat_pearson = round(cor(test, use="pairwise.complete.obs",method =
"pearson"),2)
cormat_spearman = round(cor(test, use="pairwise.complete.obs",method =
"spearman"),2)
cormat_plot_p = corrplot.mixed(cormat_pearson, lower.col = "black",tl.cex = 0.6, number.cex = .6)
cormat_plot_s = corrplot.mixed(cormat_spearman, lower.col = "black",tl.cex = 0.6, number.cex = .6)
lm.fit = lm(LastPriceSlippage~., data = test)
summary(lm.fit)
summary(lm.fit1)
lm.fit1 = lm(LastPriceSlippage~.-MktValueUSD, data = test)
lm.fit1 = lm(LastPriceSlippage~.-MktValueUSD, data = test)
summary(lm.fit1)
library(splines)
fit1 = lm(LastPriceSlippage~ns(SpreadSize, df=4), data = test)
summary(fit1)
fit1 = lm(LastPriceSlippage~ns(SpreadSize, df=10), data = test)
summary(fit1)
fit1 = lm(LastPriceSlippage~ns(SpreadSize, df=8), data = test)
summary(fit1)
plot(LastPriceSlippage, SpreadSize, cex = .5, col = "darkgrey")
plot(LastPriceSlippage, SpreadSize, data = test, cex = .5, col = "darkgrey")
plot(test$LastPriceSlippage, test$SpreadSize, cex = .5, col = "darkgrey")
title("Smoothing Spline")
fit2=smooth.spline(LastPriceSlippage, SpreadSize, df = 16)
plot(test$LastPriceSlippage, test$SpreadSize, cex = .5, col = "darkgrey")
title("Smoothing Spline")
plot(test$LastPriceSlippage, test$SpreadSize, cex = .5, col = "darkgrey",
title = "Smoothing Spline")
plot(test$LastPriceSlippage, test$SpreadSize, cex = .5, col = "darkgrey",
main = "Smoothing Spline")
fit2=smooth.spline(LastPriceSlippage, SpreadSize, data = test, df = 16)
fit2=smooth.spline(test$LastPriceSlippage, test$SpreadSize, df = 16)
fit3 = smooth.spline(test$LastPriceSlippage, test$SpreadSize, cv = TRUE)
fit3$df
lines(fit2, col = "red", lwd=2)
plot(test$LastPriceSlippage, test$SpreadSize, cex = .5, col = "darkgrey",
main = "Smoothing Spline")
lines(fit2, col = "red", lwd=2)
fit3$df
plot(test$LastPriceSlippage, test$SpreadSize, cex = .5, col = "darkgrey",
main = "Smoothing Spline")
lines(fit2, col = "red", lwd=2)
lines(fit3, col = "blue", lwd =2)
legend("topright",legend = c("16DF","10.23DF"),
col = c("red","blue"),lty = 1,lwd = 2,cex = .8)
fit2 = smooth.spline(test$SpreadSize, test$LastPriceSlippage, df = 16)
fit3 = smooth.spline(test$SpreadSize, test$LastPriceSlippage, cv = TRUE)
fit3$df
plot(test$LastPriceSlippage, test$SpreadSize, cex = .5, col = "darkgrey",
main = "Smoothing Spline")
lines(fit2, col = "red", lwd=2)
lines(fit3, col = "blue", lwd =2)
legend("topright",legend = c("16DF","2.86DF"),
col = c("red","blue"),lty = 1,lwd = 2,cex = .8)
plot(test$SpreadSize, test$LastPriceSlippage, cex = .5, col = "darkgrey",
main = "Smoothing Spline")
lines(fit2, col = "red", lwd=2)
lines(fit3, col = "blue", lwd =2)
legend("topright",legend = c("16DF","2.86DF"),
col = c("red","blue"),lty = 1,lwd = 2,cex = .8)
anova(fit2,fit3, test="F")
fit2 = smooth.spline(log(test$SpreadSize), test$LastPriceSlippage, df = 16)
fit2 = smooth.spline(test$SpreadSize, test$LastPriceSlippage, df = 16)
fit3 = smooth.spline(test$SpreadSize, test$LastPriceSlippage, cv = TRUE)
fit3$df
plot(test$SpreadSize, test$LastPriceSlippage, cex = .5, col = "darkgrey",
main = "Smoothing Spline")
lines(fit2, col = "red", lwd=2)
lines(fit3, col = "blue", lwd =2)
legend("topright",legend = c("16DF","2.86DF"),
col = c("red","blue"),lty = 1,lwd = 2,cex = .8)
library(tree)
install.packages("tree")
library(tree)
library(MASS)
train = sample(1:nrow(test),nrow(test)/2)
tree.test = tree(LastPriceSlippage~., test, subset = train)
summary(tree.test)
plot(tree.test)
text(tree.test, pretty = 0)
cv.test = cv.tree(tree.test)
plot(cv.test$size, cv.test$dev, type = 'b')
data1 = fid1[c("LastPriceSlippage","SpreadSize","MktValueUSD",
"MaturityMonths","Convexity","MidMacaulayDuration",
"LiquidityScore","Quotes","QuotesDepth","QuotesDealerCount",
"TRACETradeCount60Day")]
## takes long to run, be cautious for adding more vairables
## pairs(data1)
rm(test)
yhat = predict(tree.data1,newdata = data1[-train,])
train = sample(1:nrow(data1),nrow(data1)/2)
tree.data1 = tree(LastPriceSlippage~., data1, subset = train)
summary(tree.data1)
plot(tree.data1)
text(tree.data1, pretty = 0)
cv.data1 = cv.tree(tree.data1)
plot(cv.data1$size, cv.data1$dev, type = 'b')
yhat = predict(tree.data1,newdata = data1[-train,])
data1.test = data1[-train,"LastPriceSlippage"]
plot(yhat,data1.test)
abline(0,1)
mean((yhat-data1.test)^2)
library(randomForest)
install.packages("randomForest")
library(randomForest)
bag.data1 = randomForest(LastPriceSlippage~., data = data1, subset = train,
mtry = 13, importance=TRUE)
bag.data1 = randomForest(LastPriceSlippage~., data = data1, subset = train,
mtry = 13, importance=TRUE, na.action=na.omit)
bag.data1
yhat.bag = predict(bag.data1, newdata = data1[-train,])
plot(yhat.bag, data1.test)
abline(0,1)
mean((yhat.bag-data1.test)^2)
mean((yhat.bag-data1.test)^2)
mean(abs(yhat.bag-data1.test))
(yhat.bag-data1.test)[1:10]
summary(yhat.bag-data1.test)
summary((yhat.bag-data1.test)^2)
mean((yhat.bag-data1.test)^2)
mean((yhat.bag-data1.test)^2, na.rm = TRUE)
plot(yhat.bag, data1.test)
abline(0,1)
mean((yhat.bag-data1.test)^2, na.rm = TRUE)
rm(tree.test)
importance(bag.data1)
varImpPlot(bag.data1)
library(data.table)
library(corrplot)
library(splines)
library(tree)
library(MASS)
library(randomForest)
library(readr)
library(stats)
library(graphics)
library(ggplot2)
library(plyr)
library(stringr)
library(grid)
library(gridBase)
install.packages("gridBase")
library(readr)
library(stats)
library(graphics)
library(ggplot2)
library(plyr)
library(stringr)
library(grid)
library(gridBase)
library(data.table)
library(moments)
install.packages("moments")
library(readr)
library(stats)
library(graphics)
library(ggplot2)
library(plyr)
library(stringr)
library(grid)
library(gridBase)
library(data.table)
library(moments)
library(scales)
library(dplyr)
library(ggpubr)
install.packages("ggpubr")
install.packages("gridExtra")
install.packages("svglite")
library(readr)
library(stats)
library(graphics)
library(ggplot2)
library(plyr)
library(stringr)
library(grid)
library(gridBase)
library(data.table)
library(moments)
library(scales)
library(dplyr)
library(ggpubr)
library(gridExtra)
library(svglite)
##rm(list=ls())
getwd()
setwd("D:\Dropbox\TaoValue\Quant\R\HackerRank")
setwd("D:\\Dropbox\\TaoValue\\Quant\\R\\HackerRank")
getwd()
setwd("D:\\Dropbox\\TaoValue\\Quant\\R\\HackerRank")
getwd()
setwd("D:/Dropbox/TaoValue/Quant/R/HackerRank")
getwd()
setwd("D:/Dropbox/TaoValue/Quant/R/HackerRank")
getwd()
data = read.table("PolyReg", header=F, sep=" ")       # hackerRank console
data = read.table("PolyReg.txt", header=F, sep=" ")       # hackerRank console
data = read.csv("PolyReg.txt", header=F, sep=" ")       # hackerRank console
View(data)
View(data)
f = data[1, 1]
n = data[1, 2]
t = data[N+2, 1]
t = data[n+2, 1]
dim(data)
dim(data)[1]
trainData = as.data.frame(data[2:n+1,])
trainData = as.data.frame(data[2:n+2,])
trainData = as.data.frame(data[2:n+2,])
View(trainData)
trainData = as.data.frame(data[2:n+1,])
View(trainData)
testData = data[n+3,dim(data)[1],f]
testData = data[n+3,dim(data)[1],]
testData = as.data.frame(data[n+3,dim(data)[1],])
n+3
data[103:106,]
data[103:106,2]
data[103:106,-3]
testData = as.data.frame(data[n+3,dim(data)[1],-dim(data)[2]])
View(testData)
testData = as.data.frame(data[n+3,dim(data)[1],-dim(data)[2]])
data[n+3,dim(data)[1],-dim(data)[2]]
data[n+3,dim(data)[1],
]
testData = as.data.frame(data[n+3:dim(data)[1],-dim(data)[2]])
View(testData)
data[n+3:dim(data)[1],-dim(data)[2]]
testData = as.data.frame(data[(n+3):dim(data)[1],-dim(data)[2]])
names(trainData)[f+1] = "price"
View(testData)
View(trainData)
combs = expand.grid(replicate(3, 0:F, simplify=FALSE))
combs = unique(t(apply(combs, 1, sort)))
View(combs)
combs = expand.grid(replicate(3, 0:F, simplify=FALSE))
View(combs)
apply(combs, 1, sort)
t(apply(combs, 1, sort))
combs = expand.grid(replicate(3, 0:f, simplify=FALSE))
View(combs)
combs = unique(t(apply(combs, 1, sort)))
View(combs)
train = matrix(0, dim(trainData)[1], dim(combs)[1])
test = matrix(0, dim(testData)[1], dim(combs)[1])
for (i in 2:dim(combs)[1]) {
train[ , i] = apply(trainData[combs[i, ]], 1, prod)
test[ , i] = apply(testData[combs[i, ]], 1, prod)
}
View(test)
View(train)
train = as.data.frame(train)
train$price = trainData$price
train$V1 = NULL
test = as.data.frame(test)
test$V1 = NULL
lmfit = lm(price ~ ., train)
summary(lmfit)
lmfit.pred = predict(lmfit, newdata=test)
cat(lmfit.pred, sep="\n")
dim(combs)
combs[i, ]
trainData[combs[i, ]]
summary(lmfit)
zzfil <- tempfile(fileext=".data")
zz <- file(zzfil,"w")
cat("TITLE extra line", "2 3 5 7", "", "11 13 17", file = zz, sep = "\n")
cat("One more line\n", file = zz)
close(zz)
readLines(zzfil)
unlink(zzfil)
